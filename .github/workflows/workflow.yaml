name: full cicd 

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Install dependencies
        run: npm install

      - name: Run tests
        # Uses CI-specific test config that only runs unit tests without MongoDB
        run: npm run test:ci

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/todo-backend-nodejs"
          IMAGE_TAG="$IMAGE_NAME:${{ github.sha }}"
          
          # Build the image with both tags
          docker build -t $IMAGE_TAG .
          
          # Tag the same image as latest
          docker tag $IMAGE_TAG $IMAGE_NAME:latest
          
          # Push both tags
          docker push $IMAGE_TAG
          docker push $IMAGE_NAME:latest
          
          # Verify tags
          echo "Pushed images:"
          echo "- $IMAGE_TAG"
          echo "- $IMAGE_NAME:latest"
          
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT

  deploy:
    runs-on: wsl  # ‚Üê Target your specific runner
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        run: |
          # kubectl already installed on self-hosted runner
          kubectl version --client

      - name: Configure kubectl  
        run: |
          # kubeconfig already exists on self-hosted runner
          echo "Using existing kubeconfig..."
          kubectl config current-context

      - name: Test connectivity
        run: |
          echo "Testing kubectl connectivity..."
          kubectl cluster-info
          kubectl get nodes
          kubectl get namespaces

      - name: Update Kustomize image tag
        run: |
          cd k8s/overlays/prod
          # Update the image tag in kustomization.yaml
          kustomize edit set image gwynbliedd/todo-backend-nodejs=${{ needs.build-docker.outputs.image-tag }}
          
          # Show the changes
          echo "Updated kustomization.yaml:"
          cat kustomization.yaml
          
      - name: Deploy to Kubernetes with Kustomize
        run: |
          # Apply the production overlay
          kubectl apply -k k8s/overlays/prod
          
          # Wait for rollout
          kubectl rollout status deployment/todo-backend -n todo-prod --timeout=5m

      - name: Cleanup
        if: always()
        run: echo "No cleanup needed - using local kubeconfig"