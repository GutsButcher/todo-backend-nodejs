name: full cicd 

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/todo-backend-nodejs:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: wsl  # ‚Üê Target your specific runner
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        run: |
          # kubectl already installed on self-hosted runner
          kubectl version --client

      - name: Configure kubectl  
        run: |
          # kubeconfig already exists on self-hosted runner
          echo "Using existing kubeconfig..."
          kubectl config current-context

      - name: Test connectivity
        run: |
          echo "Testing kubectl connectivity..."
          kubectl cluster-info
          kubectl get nodes
          kubectl get namespaces

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
          images: |
            todo-backend-nodejs=${{ needs.build-docker.outputs.image-tag }}
          strategy: basic

      - name: Cleanup
        if: always()
        run: echo "No cleanup needed - using local kubeconfig"